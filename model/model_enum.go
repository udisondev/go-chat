// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// SignalTypeNeedInvite is a SignalType of type NeedInnvite.
	SignalTypeNeedInvite SignalType = iota
	// SignalTypeReadyToInvite is a SignalType of type ReadyToInvite.
	SignalTypeReadyToInvite
	// SignalTypeWaitOffer is a SignalType of type WaitOffer.
	SignalTypeWaitOffer
	// SignalTypeWaitAnswer is a SignalType of type WaitAnswer.
	SignalTypeWaitAnswer
)

var ErrInvalidSignalType = errors.New("not a valid SignalType")

const _SignalTypeName = "NeedInnviteReadyToInviteWaitOfferWaitAnswer"

var _SignalTypeMap = map[SignalType]string{
	SignalTypeNeedInvite:   _SignalTypeName[0:11],
	SignalTypeReadyToInvite: _SignalTypeName[11:24],
	SignalTypeWaitOffer:     _SignalTypeName[24:33],
	SignalTypeWaitAnswer:    _SignalTypeName[33:43],
}

// String implements the Stringer interface.
func (x SignalType) String() string {
	if str, ok := _SignalTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SignalType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SignalType) IsValid() bool {
	_, ok := _SignalTypeMap[x]
	return ok
}

var _SignalTypeValue = map[string]SignalType{
	_SignalTypeName[0:11]:  SignalTypeNeedInvite,
	_SignalTypeName[11:24]: SignalTypeReadyToInvite,
	_SignalTypeName[24:33]: SignalTypeWaitOffer,
	_SignalTypeName[33:43]: SignalTypeWaitAnswer,
}

// ParseSignalType attempts to convert a string to a SignalType.
func ParseSignalType(name string) (SignalType, error) {
	if x, ok := _SignalTypeValue[name]; ok {
		return x, nil
	}
	return SignalType(0), fmt.Errorf("%s is %w", name, ErrInvalidSignalType)
}
