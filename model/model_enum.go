// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// SignalTypeNeedConnect is a SignalType of type NeedConnect.
	SignalTypeNeedConnect SignalType = iota
	// SignalTypeOffer is a SignalType of type Offer.
	SignalTypeOffer
	// SignalTypeAnswer is a SignalType of type Answer.
	SignalTypeAnswer
	// SignalTypeCandidate is a SignalType of type Candidate.
	SignalTypeCandidate
)

var ErrInvalidSignalType = errors.New("not a valid SignalType")

const _SignalTypeName = "NeedConnectOfferAnswerCandidate"

var _SignalTypeMap = map[SignalType]string{
	SignalTypeNeedConnect: _SignalTypeName[0:11],
	SignalTypeOffer:       _SignalTypeName[11:16],
	SignalTypeAnswer:      _SignalTypeName[16:22],
	SignalTypeCandidate:   _SignalTypeName[22:31],
}

// String implements the Stringer interface.
func (x SignalType) String() string {
	if str, ok := _SignalTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SignalType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SignalType) IsValid() bool {
	_, ok := _SignalTypeMap[x]
	return ok
}

var _SignalTypeValue = map[string]SignalType{
	_SignalTypeName[0:11]:  SignalTypeNeedConnect,
	_SignalTypeName[11:16]: SignalTypeOffer,
	_SignalTypeName[16:22]: SignalTypeAnswer,
	_SignalTypeName[22:31]: SignalTypeCandidate,
}

// ParseSignalType attempts to convert a string to a SignalType.
func ParseSignalType(name string) (SignalType, error) {
	if x, ok := _SignalTypeValue[name]; ok {
		return x, nil
	}
	return SignalType(0), fmt.Errorf("%s is %w", name, ErrInvalidSignalType)
}
